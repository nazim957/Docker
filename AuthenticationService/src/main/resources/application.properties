server.port=8080
jwt.secret=secret
spring.application.name=AUTHENTICATION-SERVICE

spring.datasource.url=jdbc:mysql://monorail.proxy.rlwy.net:16313/railway
spring.datasource.username=root
spring.datasource.password=fhaAcH3FF52AG3CdFeFA42A5GcHbGgg5



#spring.datasource.url=jdbc:mysql://news.c38c0me6gg6r.eu-north-1.rds.amazonaws.com:3307/AuthenticationService?createDatabaseIfNotExist=true
#spring.datasource.username=admin
#spring.datasource.password=Junaid123


spring.rabbitmq.host=woodpecker-01.rmq.cloudamqp.com
spring.rabbitmq.port=5671
spring.rabbitmq.username=ilhxwmxw
spring.rabbitmq.password=mYwPoe6Lb28HfHM07UgyRz5LMZV82ftA
spring.rabbitmq.virtual-host=ilhxwmxw
spring.rabbitmq.ssl.enabled=true



#spring.config.import=optional:configserver:http://localhost:8085

#jpa configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.MySQL8Dialect
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
server.error.include-message=always

# JWT Token
jwttoken.message=Login Successful

# Controller Exceptions
controller.exception.message1=Id and Password Empty
controller.exception.message2=Id and Password not found
controller.exception.message3=Id and Password invalid

# Service Messages
service.message1=User Already Exists
service.message2=Invalid Id and Password

app.jwttoken.message=Login Successful
app.controller.exception.message1=Id and Password Empty
app.controller.exception.message2=Id and Password not found
app.controller.exception.message3=Id and Password invalid
app.service.message1=User Already Exists
app.service.message2=Invalid Id and Password




#eureka
#eureka.instances.prefer-ip-address=true
#eureka.client.fetch-registry=true
#eureka.client.register-with-eureka=true
#server.service-url.defaultZone=http://localhost/8761/eureka

##Kafka
#spring.kafka.bootstrap-servers=kafka:9092
#spring.kafka.consumer.group-id=user-group
#spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#

